// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const product_Delete = `-- name: Product_Delete :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) Product_Delete(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, product_Delete, id)
	return err
}

const product_Update = `-- name: Product_Update :exec
UPDATE products
  SET title = $2,
  description = $3,
  stock = $4,
  image_url = $5,
  price = $6
WHERE id = $1
`

type Product_UpdateParams struct {
	ID          int64
	Title       string
	Description pgtype.Text
	Stock       int32
	ImageUrl    pgtype.Text
	Price       int32
}

func (q *Queries) Product_Update(ctx context.Context, arg Product_UpdateParams) error {
	_, err := q.db.Exec(ctx, product_Update,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Stock,
		arg.ImageUrl,
		arg.Price,
	)
	return err
}

const products_Create = `-- name: Products_Create :one
INSERT INTO products (
  title,
  description,
  price,
  stock,
  image_url
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, title, description, image_url, price, stock, created_at, updated_at
`

type Products_CreateParams struct {
	Title       string
	Description pgtype.Text
	Price       int32
	Stock       int32
	ImageUrl    pgtype.Text
}

func (q *Queries) Products_Create(ctx context.Context, arg Products_CreateParams) (Product, error) {
	row := q.db.QueryRow(ctx, products_Create,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.ImageUrl,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ImageUrl,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const products_GetAll = `-- name: Products_GetAll :many
SELECT id, title, description, image_url, price, stock, created_at, updated_at FROM products
ORDER BY created_at DESC
`

func (q *Queries) Products_GetAll(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, products_GetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.Price,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const products_GetOne = `-- name: Products_GetOne :one
SELECT id, title, description, image_url, price, stock, created_at, updated_at FROM products
WHERE id = $1
`

func (q *Queries) Products_GetOne(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, products_GetOne, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ImageUrl,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
