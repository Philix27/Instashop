// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orderItem.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const orderItem_ClearOrders = `-- name: OrderItem_ClearOrders :exec
DELETE FROM order_items
WHERE order_id = 1
`

func (q *Queries) OrderItem_ClearOrders(ctx context.Context) error {
	_, err := q.db.Exec(ctx, orderItem_ClearOrders)
	return err
}

const orderItem_Create = `-- name: OrderItem_Create :exec
INSERT INTO order_items (
   quantity,
   order_id,
   product_id,  
   user_id  
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, created_at, updated_at, quantity, order_id, product_id, user_id
`

type OrderItem_CreateParams struct {
	Quantity  int32
	OrderID   pgtype.Int4
	ProductID pgtype.Int4
	UserID    pgtype.Int4
}

func (q *Queries) OrderItem_Create(ctx context.Context, arg OrderItem_CreateParams) error {
	_, err := q.db.Exec(ctx, orderItem_Create,
		arg.Quantity,
		arg.OrderID,
		arg.ProductID,
		arg.UserID,
	)
	return err
}

const orderItem_DeleteById = `-- name: OrderItem_DeleteById :exec
DELETE FROM order_items
WHERE id = $1
`

func (q *Queries) OrderItem_DeleteById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, orderItem_DeleteById, id)
	return err
}

const orderItem_DeleteItem = `-- name: OrderItem_DeleteItem :exec
DELETE FROM order_items
WHERE order_id = $1 AND product_id = $2
`

type OrderItem_DeleteItemParams struct {
	OrderID   pgtype.Int4
	ProductID pgtype.Int4
}

func (q *Queries) OrderItem_DeleteItem(ctx context.Context, arg OrderItem_DeleteItemParams) error {
	_, err := q.db.Exec(ctx, orderItem_DeleteItem, arg.OrderID, arg.ProductID)
	return err
}

const orderItem_GetAll = `-- name: OrderItem_GetAll :many
SELECT id, created_at, updated_at, quantity, order_id, product_id, user_id FROM order_items
ORDER BY created_at DESC
`

func (q *Queries) OrderItem_GetAll(ctx context.Context) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, orderItem_GetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Quantity,
			&i.OrderID,
			&i.ProductID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderItem_GetAllOrderId = `-- name: OrderItem_GetAllOrderId :many
SELECT id, created_at, updated_at, quantity, order_id, product_id, user_id FROM order_items
WHERE order_id = $1
ORDER BY created_at DESC
`

func (q *Queries) OrderItem_GetAllOrderId(ctx context.Context, orderID pgtype.Int4) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, orderItem_GetAllOrderId, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Quantity,
			&i.OrderID,
			&i.ProductID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderItem_Update = `-- name: OrderItem_Update :exec
UPDATE order_items
  SET quantity = $2
WHERE id = $1
`

type OrderItem_UpdateParams struct {
	ID       int64
	Quantity int32
}

func (q *Queries) OrderItem_Update(ctx context.Context, arg OrderItem_UpdateParams) error {
	_, err := q.db.Exec(ctx, orderItem_Update, arg.ID, arg.Quantity)
	return err
}
