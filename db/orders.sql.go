// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"
)

const orders_Create = `-- name: Orders_Create :one
INSERT INTO orders (
  user_id,
  order_status
) VALUES (
  $1,
  "CREATED"
)
RETURNING id, user_id, order_status, created_at, updated_at
`

func (q *Queries) Orders_Create(ctx context.Context, userID int32) (Order, error) {
	row := q.db.QueryRow(ctx, orders_Create, userID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const orders_GetAll = `-- name: Orders_GetAll :many
SELECT id, user_id, order_status, created_at, updated_at FROM orders
ORDER BY created_at DESC
`

func (q *Queries) Orders_GetAll(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, orders_GetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orders_GetAllByUserId = `-- name: Orders_GetAllByUserId :many
SELECT id, user_id, order_status, created_at, updated_at FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) Orders_GetAllByUserId(ctx context.Context, userID int32) ([]Order, error) {
	rows, err := q.db.Query(ctx, orders_GetAllByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orders_GetById = `-- name: Orders_GetById :one
SELECT id, user_id, order_status, created_at, updated_at FROM orders
WHERE id = $1
`

func (q *Queries) Orders_GetById(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, orders_GetById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const orders_UpdateStatus = `-- name: Orders_UpdateStatus :exec
UPDATE orders
  SET order_status = $2
WHERE id = $1
`

type Orders_UpdateStatusParams struct {
	ID          int64
	OrderStatus Orderstatus
}

func (q *Queries) Orders_UpdateStatus(ctx context.Context, arg Orders_UpdateStatusParams) error {
	_, err := q.db.Exec(ctx, orders_UpdateStatus, arg.ID, arg.OrderStatus)
	return err
}
