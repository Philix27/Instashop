// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const orders_GetAll = `-- name: Orders_GetAll :many
SELECT id, user_id, order_status, items, created_at, updated_at FROM orders
ORDER BY created_at DESC
`

func (q *Queries) Orders_GetAll(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, orders_GetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderStatus,
			&i.Items,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orders_GetAllByUserId = `-- name: Orders_GetAllByUserId :many
SELECT id, user_id, order_status, items, created_at, updated_at FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) Orders_GetAllByUserId(ctx context.Context, userID pgtype.Int4) ([]Order, error) {
	rows, err := q.db.Query(ctx, orders_GetAllByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderStatus,
			&i.Items,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orders_Update = `-- name: Orders_Update :exec
UPDATE orders
  SET order_status = $2
WHERE id = $1
`

type Orders_UpdateParams struct {
	ID          int64
	OrderStatus NullOrderstatus
}

func (q *Queries) Orders_Update(ctx context.Context, arg Orders_UpdateParams) error {
	_, err := q.db.Exec(ctx, orders_Update, arg.ID, arg.OrderStatus)
	return err
}
