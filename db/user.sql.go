// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const user_Create = `-- name: User_Create :one
INSERT INTO users (
  email,
  hashed_password 
) VALUES (
  $1,
  $2
)
RETURNING id, email, hashed_password, created_at, updated_at
`

type User_CreateParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) User_Create(ctx context.Context, arg User_CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, user_Create, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const user_GetByEmail = `-- name: User_GetByEmail :one
SELECT id, email, hashed_password, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) User_GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, user_GetByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const user_GetById = `-- name: User_GetById :one

SELECT id, email, hashed_password, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

// ! #SECTION user
func (q *Queries) User_GetById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, user_GetById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const user_ResetPassword = `-- name: User_ResetPassword :exec
UPDATE users
  SET hashed_password = $2
WHERE id = $1
`

type User_ResetPasswordParams struct {
	ID             int64
	HashedPassword string
}

func (q *Queries) User_ResetPassword(ctx context.Context, arg User_ResetPasswordParams) error {
	_, err := q.db.Exec(ctx, user_ResetPassword, arg.ID, arg.HashedPassword)
	return err
}
